{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"arduino_example/","title":"Arduino Example","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> </ul> <p>Note</p> <p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <ul> <li>How to Install CH340 Drivers</li> </ul> <p>For the scope of this tutorial, we will highlight the example from the GitHub repository to get started. Head to the GitHub repository to download the example  </p> GitHub Repo &gt; SparkFun_Soft_Power_Switch_USB-C"},{"location":"arduino_example/#upload-arduino-example","title":"Upload Arduino Example","text":"<p>After unzipping the compressed files, navigate to the example: ... &gt; SparkFun_Soft_Power_Switch_USB-C-main &gt; Examples &gt; SoftPowerSwitchMk2_Example &gt; SoftPowerSwitchMk2_Example.</p> <p>If you have not already, connect the Soft Power Switch's power, OFF, and PUSH to your Arduino's GPIO pins. In this case, we used the SparkFun IoT RedBoard - ESP32 Development Board. Depending on your microcontroller, you may need to adjust the pin connections and definitions with respect to the microcontroller's GPIO pins. Then connect the USB from the IN to your computer's USB port. Press the power button to turn the Soft Power Switch ON.</p> Soft Power Switch - USB-C              SparkFun IoT RedBoard -ESP32 Development Board              VOUT 5V (or V) GND GND OFF <code>32</code> (or <code>A4</code>) PUSH <code>14</code> Uploading Code to ESP32 IoT RedBoard with Soft Power Switch Connected <p>For users using an Arduino microcontroller, select your board in the Tools menu (in our case the SparkFun ESP32 RedBoard IoT RedBoard) and the correct Port it enumerated on. You can also copy or paste the code as shown below. Then click \"Upload\".</p> <pre><code>    /*\n      Control the power to a system using the SparkFun Soft Power Switch Mk2\n      By: Nathan Seidle\n      Adapted by: Paul Clark\n      SparkFun Electronics\n      Date: March 14th, 2024\n      License: MIT. See license file for more information\n\n      This example assumes the OFF pin is connected.\n\n      A simple tap of the power button will turn on the system. If the power button is not being pressed\n      (accidental tap) the system will turn off after ~20ms. If the system turns on and sees the power\n      button held for 0.5s, it will begin normal operation.\n\n      During normal system operation, if user presses the power button for 2s, the system\n      will shut down. This means the power button can also be used as a general 'select' button as\n      long as user doesn't hold button for more than 2s.\n\n      This example will output serial states. If you are powering your board over a USB connection then\n      the power button can't do its job. We did our testing by connecting the TX and GND pins of a RedBoard to\n      an external USB to Serial adapter. That way the battery + Soft Power Switch could control power\n      to the board.  \n    */\n\n    //Hardware connections - GPIO pins (change these as required)\n    int _PUSH = 14; // Connect this GPIO to the PUSH breakout pad\n    int _OFF = 32; // Connect this GPIO to the OFF breakout pad\n\n    int STAT_LED = LED_BUILTIN;\n\n    unsigned long powerPressedStartTime = 0;\n\n    int debounceDelay = 20;\n\n    //Uncomment the following line to turn on shutdown time measurements\n    //#define PRINT_TIMER_OUTPUT\n\n    void setup()\n    {\n      Serial.begin(115200);\n      Serial.println(\"Soft Power Switch Mk2 example\");\n\n      pinMode(_PUSH, INPUT_PULLUP);\n\n      //User has pressed the power button to turn on the system\n      //Was it an accidental bump or do they really want to turn on?\n      //Let's make sure they continue to press for two seconds\n      Serial.print(\"Initial power on check\");\n      powerPressedStartTime = millis();\n      while (digitalRead(_PUSH) == LOW)\n      {\n        //Wait for user to stop pressing button.\n        //What if user has left something heavy pressing the power button?\n        //The soft power switch will automatically turn off the system! Handy.\n        delay(100);\n\n        if ((millis() - powerPressedStartTime) &gt; 500)\n          break;\n        Serial.print(\".\");\n      }\n      Serial.println();\n\n      if ((millis() - powerPressedStartTime) &lt; 500)\n      {\n        Serial.println(\"Power button tap. Returning to off state. Powering down\");\n        powerDown();\n      }\n\n      Serial.println(\"User wants to turn system on!\");\n      powerPressedStartTime = 0; //Reset var to return to normal 'on' state\n\n      //Here we display something to user indicating system is on and running\n      //For example an external display or LED turns on\n      pinMode(STAT_LED, OUTPUT);\n      digitalWrite(STAT_LED, HIGH);\n\n      Serial.println(\"Press 'r' to enter infinite loop to test power-down override\");\n      Serial.println(\"Press 'z' to do a powerdown\");\n      Serial.println(\"Press and hold power button for 2s to do a powerdown\");\n\n      while (Serial.available()) // Flush the Serial RX buffer\n        Serial.read();\n    }\n\n    void loop()\n    {\n      if (Serial.available())\n      {\n        char incoming = Serial.read();\n\n        if (incoming == 'z')\n        {\n          Serial.println(\"Power down\");\n          powerDown();\n        }\n        else if (incoming == 'r')\n        {\n          Serial.println(\"System locked. Now hold power button to force power down without using software\");\n\n          //Here we wait for user press button so we can time it\n          while (digitalRead(_PUSH) == HIGH)\n            delay(1);\n\n          powerPressedStartTime = millis();\n          Serial.println(\"Doing nothing, waiting for power override to kick in\");\n          while (1)\n          {\n    #ifdef PRINT_TIMER_OUTPUT\n            Serial.println(millis() - powerPressedStartTime);\n    #endif\n            delay(1);\n\n            if(digitalRead(_PUSH) == HIGH) break;\n          }\n          Serial.println(\"User released button before forced powered could complete. Try again, but hold power button for 7s\");\n          powerPressedStartTime = 0; //Reset var to return to normal 'on' state\n        }\n      }\n\n      if (digitalRead(_PUSH) == LOW &amp;&amp; powerPressedStartTime == 0)\n      {\n        //Debounce check\n        delay(debounceDelay);\n        if (digitalRead(_PUSH) == LOW)\n        {\n          Serial.println(\"User is pressing power button. Start timer.\");\n          powerPressedStartTime = millis();\n        }\n      }\n      else if (digitalRead(_PUSH) == LOW &amp;&amp; powerPressedStartTime &gt; 0)\n      {\n        //Debounce check\n        delay(debounceDelay);\n        if (digitalRead(_PUSH) == LOW)\n        {\n          if ((millis() - powerPressedStartTime) &gt; 2000) // Check if button has been held for &gt;= 2 seconds\n          {\n            Serial.println(\"Time to power down!\");\n            powerDown();\n          }\n        }\n      }\n      else if (digitalRead(_PUSH) == HIGH &amp;&amp; powerPressedStartTime &gt; 0)\n      {\n        //Debounce check\n        delay(debounceDelay);\n        if (digitalRead(_PUSH) == HIGH)\n        {\n          Serial.print(\"Power button released after ms: \");\n          Serial.println(millis() - powerPressedStartTime);\n        }\n        powerPressedStartTime = 0; //Reset var to return to normal 'on' state\n      }\n    }\n\n    //Immediately power down\n    void powerDown()\n    {\n      //Indicate to user we are shutting down\n      digitalWrite(STAT_LED, LOW);\n\n      Serial.println(\"Pulling OFF high\");\n      Serial.flush();\n\n      powerPressedStartTime = millis();\n\n      pinMode(_OFF, OUTPUT);\n      digitalWrite(_OFF, HIGH); // Pull OFF high to turn the power off\n\n      while (1)\n      {\n    #ifdef PRINT_TIMER_OUTPUT\n        Serial.println(millis() - powerPressedStartTime);\n    #endif\n        delay(1);\n      }\n    }\n</code></pre> <p>After uploading the code, disconnect the Arduino from your COM port. Then wire a 3.3V Serial Basic Breakout to the Arduino's serial UART. In this case, we connected to the SparkFun IoT RedBoard - ESP32 Development Board. Depending on your microcontroller, you may need to adjust the pin connections and definitions with respect to the microcontroller's UART pins.</p> 3.3V Serial Basic              SparkFun IoT RedBoard- ESP32 Development Board              TXO 3/RX-0 RXI 1/TX-0 GND GND 3.3V Serial Basic Connected to ESP32 IoT RedBoard Hardware UART"},{"location":"arduino_example/#initial-boot","title":"Initial Boot","text":"<p>Open the Serial Monitor or terminal emulator of your choice, and connect to the 3.3V Serial Basic Breakout's COM port with the baud rate set to 115200. Insert a USB power source into the Soft Power Switch's IN port. Hit the reset button on the Soft Power Switch. Since we are using the ESP32, we will see an initial output when the microcontroller boots up. If the button is not held down for 0.5 seconds, you will receive the following message as shown below.</p> <pre><code>Soft Power Switch Mk2 example\nInitial power on check\nPower button tap. Returning to off state. Powering down\nPulling OFF high\n</code></pre> Arduino Output Soft Power Switch - USB-C with No Button Press on Startup <p>Note</p> <p>You may receive a different output when directly connecting the Soft Power Switch to a computer's COM port rather than using a separate 3.3V Serial Basic. When using the Soft Power Switch directly, part of the ESP32 boot up and <code>Serial.print()</code> messages may be cut off as the IoT RedBoard - ESP32 is being powered up.</p>"},{"location":"arduino_example/#normal-operation-power-on","title":"Normal Operation - Power On","text":"<p>Press down on the button for just over 0.5 seconds (but no longer than 2 seconds) to power your Arduino for normal system operation. Once the ESP32 boots up, you should see the following output. A timer will begin checking the length of time that the button has been pressed down. Once the button has been released, you will receive an output indicating the amount of time that the button has been pressed down after 0.5 seconds.</p> <pre><code>Soft Power Switch Mk2 example\nInitial power on check....\nUser wants to turn system on!\nPress 'r' to enter infinite loop to test power-down override\nPress 'z' to do a powerdown\nPress and hold power button for 2s to do a powerdown\nUser is pressing power button. Start timer.\nPower button released after ms: 300\n</code></pre> Arduino Output Soft Power Switch - USB-C Normal Operation - Power On <p>Note</p> <p>The wake-up time can be tweaked to your own user experience. We found 500ms for power up work really well.</p>"},{"location":"arduino_example/#normal-operation-power-off","title":"Normal Operation - Power Off","text":"<p>Let's try turning the power off under normal operation. Press the power button for 2 seconds to power down the Arduino. You will receive the following output. You will also notice that the power LEDs on the SparkFun IoT RedBoard - ESP32 turn off indicating that there is no power.</p> <pre><code>User is pressing power button. Start timer.\nTime to power down!\nPulling OFF high\n</code></pre> Arduino Output Soft Power Switch - USB-C Normal Operation Power Down <p>Note</p> <p>The power-down time can be tweaked to your own user experience. We found 2s for power-down work really well. If you decide to adjust the power-down time, make sure to not exceed ~10 seconds as the force power down will take into effect.</p>"},{"location":"arduino_example/#system-lock-and-power-down-via-arduino-serial-monitor","title":"System Lock and Power Down via Arduino Serial Monitor","text":"<p>Remember the output from earlier? There were additional options to control the Soft Power Switch from the Arduino Serial Monitor. Press down on the power button for 0.5 seconds to enter the normal operation again. You will be presented with two options:</p> <ul> <li>r \u2014 Sending an r will cause the Arduino to enter an infinite loop to test power-down override. This will lock the system and force the Soft Power Switch to only shutdown when the button is pressed down rather then sending a character to the Arduino to power down. When locking the system, you will need to press the button down for 7 seconds to force the Soft Power Switch to power down. Once the button has been pressed down for 7 seconds, the Soft Power Switch will shut power off at the OUT port.</li> <li>z \u2014 Sending a z will power down the Arduino.</li> </ul> Arduino Output Soft Power Switch - USB-C Normal Operation - Power On <p>Let's send an r to lock the system to force the Soft Power Switch - USB-C to power down. Then press down on the power button for 7 seconds. You will receive the following message indicating that the system is locked. Once the power button is pressed down, an additional message on the next line will be output to indicate that we are waiting for the power override.  After 7 seconds, power will be disabled at the OUT port and the IoT RedBoard - ESP32 will turn off.</p> <pre><code>System locked. Now hold power button to force power down without using software\nDoing nothing, waiting for power override to kick in\n</code></pre> Arduino Output Soft Power Switch - USB-C Button Override <p>Note</p> <p>If the button is released before 7 seconds, you will receive the following message indicating that the forced power down could not be completed when the system is locked. This will break out of the infinite loop and require you to send another r through the serial terminal in order to test the power-down override again.</p> <pre><code>User released button before forced powered could complete. Try again, but hold power button for 7s\n</code></pre> <p> Arduino Output Soft Power Switch - USB-C Unable to Force Power Down </p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_hookup/","title":"Hardware Hookup","text":"<p>In this section, we will go over how to connect to the Soft Power Switch - USB-C.</p>"},{"location":"hardware_hookup/#connecting-via-pth","title":"Connecting via PTH","text":"<p>For temporary connections to the PTHs, you could use IC hooks to test out the pins. However, you'll need to solder headers or wires of your choice to the board for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul>"},{"location":"hardware_hookup/#input-power","title":"Input Power","text":"<p>The board was designed to be used with USB. Simply insert the USB-C connector into the USB connector labeled as IN.</p> USB-C Cable inserted into USB-C Connector <p>Of course, power can also be soldered directly to the PTH as well.</p> Power Supply              Soft Power Switch - USB-C              1.8V to 5.5V Typically 5V if using USB VIN GND GND"},{"location":"hardware_hookup/#output-power","title":"Output Power","text":"<p>Then you can insert it between the Soft Power Switch's USB connector labeled OUT and the other end will be inserted into the USB connector of the target board being powered (in this case, the SparkFun IoT RedBoard - ESP32 Development Board).</p> USB Cable between the Soft Power Switch - USB-C and IoT RedBoard - ESP32 <p>Of course, power can also be soldered directly to the PTH as well. Since we are powering the output with a USB, you will need to connect it to your system's USB power. In this case, VUSB net was labeled as V on the board. Depending on your system, it may be labeled as VUSB, RAW, or VCC. Make sure to check the board's hardware design before deciding to connect VOUT to your system.</p> Soft Power Switch - USB-C              SparkFun IoT RedBoard -ESP32 Development Board              VOUT 5V (or V) GND - <p>Note</p> <p>The voltage range of the Soft Power Switch - USB-C is between 1.8V to 5.5V. Users can also connect a different power source and connect the output to VIN of their system. Just make that the voltage is within the operating range of the target device.</p>"},{"location":"hardware_hookup/#external-button","title":"External Button","text":"<p>For users that need to connect an external button, you will simply need to connect one terminal of the button to BTN and the other terminal to GND. In this case, IC hooks and F/M jumper wires were used to connect an external momentary push button.</p> External Button Connected Soft Power Switch - USB-C              Button              BTN Normally Open Pin GND Common Pin"},{"location":"hardware_hookup/#off-and-push","title":"Off and Push","text":"<p>To connect to the OFF and PUSH pins with a microcontroller, you will need two GPIO pins with code to control or read the Soft Power Switch. Depending on your microcontroller, you may need to adjust the pin connections and definitions with respect to the microcontroller's GPIO pins.</p> OFF and PUSH Pins Connected to IoT RedBoard Soft Power Switch - USB-C              SparkFun IoT RedBoard -ESP32 Development Board              OFF <code>32</code> (or <code>A4</code>) PUSH <code>14</code> <p>Tip</p> <p>Remember, the PUSH pin requires a pull-up resistor when connecting it to a microcontroller's GPIO pin. You can use the internal pull-up resistor on the microcontroller so that the pin is not floating.</p>"},{"location":"hardware_hookup/#arduino-serial-output","title":"Arduino Serial Output","text":"<p>To view the Arduino's serial output when powering the system through USB battery, you will need to wire a 3.3V Serial Basic Breakout to the Arduino's serial UART. In this case, we connected to the SparkFun IoT RedBoard - ESP32 Development Board primary UART port. Depending on your microcontroller, you may need to adjust the pin connections and definitions with respect to the microcontroller's UART pins.</p> 3.3V Serial Basic              SparkFun IoT RedBoard- ESP32 Development Board              TXO 3/RX-0 RXI 1/TX-0 GND GND 3.3V Serial Basic Connected to ESP32 IoT RedBoard Hardware UART"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun Soft Power Switch - USB-C. For more information, check out our Resources and Going Further on the components used on the breakout board.</p> Top View Bottom View"},{"location":"hardware_overview/#soft-power-switch-versions","title":"Soft Power Switch Versions","text":"<p>The SparkX Mk1 Soft Power Switch is great, but we do see occasional issues caused by component tolerances or the operating temperature. Mk2 is based on an application note by Texas Instruments, and is a completely digital design. It is based around a 74LVC1G175 D-type flip-flop - remember those?! - and is insensitive to temperature and component variation.</p> SparkX Soft Power Switch Mk1 SparkFun Soft Power Switch - USB-C <p>It also includes improvements like:</p> <ul> <li>An over-current self-resetting 2A fuse.</li> <li>Input and output LEDs.</li> <li>LED jumpers.</li> <li>Improved momentary button (i.e. the height of the button is increased).</li> </ul> <p>Differences include:</p> <ul> <li>The Soft Power Switch - USB-C works up to 5.5V only (the Mk1 is good up to 12V).</li> <li>For Mk2, driving the fast OFF pin HIGH by the system will force fast power off via software. However for Mk1, the fast OFF pin was driven low.</li> <li>Slightly bigger PCB: 1.0\"x1.0\" sized breakout (the Mk1 was 0.8\"x1.0\").</li> <li>This version includes USB connectors instead of JST connectors.</li> <li>USB data lines between the IN and OUT ports.</li> </ul>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>Warning</p> <p>The Soft Power Switch - USB-C works up to 5.5V only. (Mk1 is good up to 12V.)</p> <p>Warning</p> <p>The Soft Power Switch USB-C was designed to work with DC loads. Unfortunately, the board is not designed for AC loads.</p> <p>Note</p> <p>Once the Soft Power Switch - USB-C is powered, it will take a few seconds to discharge power after disconnecting the power source from the IN port. So if you decide to do quick power cycle, the board can still be powered if there is not a long enough delay.</p> <p>The maximum input voltage that the Soft Power Switch - USB-C can handle is 5.5V while the minimum input voltage is 1.8V. The board was designed to be used with USB, so the typical voltage will be about 5V. The maximum current draw that the board can handle is 2A continuous and 4A peak (fuse protected). With the VIN LED disabled, the board has a very low quiescent current: &lt;1\u00b5A @ 3.75V.</p> <ul> <li>VIN \u2014 This pin is the voltage input. As stated above, the maximum input voltage is 5.5V while the minimum is 1.8V. Voltage is applied to this pin from a USB power source, which is 5V.</li> <li>VOUT \u2014 The output voltage of the board whenever the switch is active.</li> <li>GND \u2014 Of course, is the common, ground voltage (0V reference) for the system.</li> </ul> Power, Ground and USB Connectors Highlighted <p>The Soft Power Switch - USB-C also supports USB data feed-through. If the target device is a microcontroller, you can send serial data and upload to the board.</p>"},{"location":"hardware_overview/#power-button-and-button-state","title":"Power Button and Button State","text":"<p>The board includes a built-in momentary push button as the power button. This pin is broken out to a PTH for users to connect an external button. There is also the PUSH pin to indicate the button's state. The PUSH pin can act as an output to a microcontroller indicating the state of the power button (HIGH = not pressed, LOW = user is pressing power button). This can be used as an input to your firmware to begin to shut down before power is lost. Alternatively, there is also an OFF pin that can be driven HIGH by the system forcing fast power off via software. Below is a summary of the pins broken out.</p> <ul> <li>BTN \u2014 Short for button. If desired, connect this input pin to an external button between BTN and GND.</li> <li>PUSH \u2014 Open-drain output. This pin requires a pull-up resistor. A low indicates the button is pushed.</li> <li>OFF \u2014 Drive HIGH to turn the output off.</li> </ul> Top View Bottom View <p>Note</p> <p>For Mk2, driving the fast OFF pin HIGH by the system will force fast power off via software. However for Mk1, the fast OFF pin was driven low.</p>"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<ul> <li>VIN \u2014 The VIN LED connects to the input voltage. This indicates when there is voltage at VIN. This LED can be disabled with the LED jumper on the back of the board and below the silkscreen labeled IN.</li> <li>VOUT \u2014 The VOUT LED connects to the output voltage. This indicates when there is voltage at VOUT. This LED can be disabled with the LED jumper on the back of the board and below the silkscreen labeled OUT.</li> </ul> LEDs Highlighted"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>The back of the board includes jumpers to configure the board.</p> <ul> <li>LED (below IN) \u2014 By default, the LED jumper located below the silkscreen labeled IN is closed. This connects the VIN LED to the input voltage. Cutting this will disable the LED for the input voltage.</li> <li>LED (below OUT) \u2014 By default, the LED jumper located below the silkscreen labeled OUT is closed. This connects the LED to the output voltage. Cutting this jumper will disable the LED for the output voltage.</li> </ul> Jumpers Highlighted"},{"location":"hardware_overview/#3d-model","title":"3D Model","text":"<p>A 3D model of the board and components was exported to a STEP file using KiCad.</p> <p></p> Click Here for the STEP File"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 1.0\" x 1.0\" (2.54mm x 2.54mm). There are 4x mounting holes by the corners of the board. You can use 4-40 standoffs to mount the board to a panel or enclosure.</p> Board Dimensions"},{"location":"introduction/","title":"Introduction","text":"<p>The SparkFun Soft Power Switch is a passive, hard on/off switch with software feedback and control. In other words, it's like the on/off switch on a laptop. A simple press will turn the system on. Another press can (with MCU intervention) turn off the system. And if things go really wrong, pressing and holding the button for ~10 seconds will force a power-down. If you're building something with an enclosed Thing Plus board and need a good power button, this is the board you need. This version has USB-C connectors but we also have a version with JST 2mm battery connectors.</p> <ul> <li> <p> </p> <p> SparkFun Soft Power Switch - USB-C    PRT-27081    Purchase from SparkFun  </p> </li> </ul> <p>In this tutorial, we'll go over the hardware and how to hookup the SparkFun Soft Power Switch - USB-C to an Arduino. We will also go over an Arduino example to get started.</p>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 2m    CAB-15424 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board    WRL-19177 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Soft Power Switch - USB-C    PRT-27081 </p> </li> </ul> <ul> <li> <p> </p> <p> USB 2.0 Type-C Cable - 1 Meter    CAB-16905 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <ul> <li> <p> </p> <p> Multicolor Buttons - 4-pack    PRT-14460 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Serial Basic Breakout - CH340C and USB-C    DEV-15096 </p> </li> </ul> <ul> <li> <p> </p> <p> Breadboard - Mini Modular (Blue)    PRT-12045 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/F Pack of 10    PRT-09140 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul>"},{"location":"introduction/#usb-c-cables","title":"USB C Cables","text":"<p>For those that want to take advantage of the USB-C connectors, you can grab the following cables from the catalog.</p> <ul> <li> <p> </p> <p> USB 2.0 Type-C Cable - 1 Meter    CAB-16905 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 2m    CAB-15424 </p> </li> </ul>"},{"location":"introduction/#tools","title":"Tools","text":"<p>For users connecting to the plated through holes, you will need a soldering iron, solder, and general soldering accessories.</p> <ul> <li> <p> </p> <p> PINECIL Soldering Iron Kit    TOL-24063 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Strippers - 30AWG (Hakko)    TOL-12630 </p> </li> </ul> <ul> <li> <p> </p> <p> Flush Cutters - Hakko    TOL-11952 </p> </li> </ul> <ul> <li> <p> </p> <p> Heat Shrink Kit    PRT-09353 </p> </li> </ul>"},{"location":"introduction/#prototyping-accessories","title":"Prototyping Accessories","text":"<p>Depending on your setup, you may want to use IC hooks for a temporary connection. However, you will want to solder header pins to connect devices to the plated through holes for a secure connection.</p> <ul> <li> <p> </p> <p> Breadboard - Self-Adhesive (White)    PRT-12002 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <ul> <li> <p> </p> <p> Break Away Male Headers - Right Angle    PRT-00553 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/F Pack of 10    PRT-09140 </p> </li> </ul> <ul> <li> <p> </p> <p> Female Headers    PRT-00115 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> How to Solder: Through-Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> IoT RedBoard ESP32 Development Board Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Board Definitions in the Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> Logic Levels </p> </li> </ul> <ul> <li> <p> </p> <p> How to Power a Project </p> </li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>Now that you've successfully got your SparkFun Soft Power Switch - USB-C and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>Schematic (PDF)</li> <li>KiCad Files (ZIP)</li> <li>3D Model (STEP)</li> <li>Board Dimensions (PNG)</li> <li>Component Datasheets<ul> <li>SN74LVC1G14 (PDF)</li> <li>SN74LVC1G17 (PDF)</li> <li>SN74LVC1G175 (PDF)</li> <li>Texas Instruments Application Report: Push-Button Circuit SCEA048B (PDF)</li> </ul> </li> <li>GitHub Hardware Repo</li> </ul> <p>Or check out the other Soft Power Switch with JST connectors!</p> <ul> <li> <p> </p> <p> SparkFun Soft Power Switch - JST 2mm Hookup Guide </p> </li> </ul>"},{"location":"single_page/","title":"Introduction","text":"<p>The SparkFun Soft Power Switch is a passive, hard on/off switch with software feedback and control. In other words, it's like the on/off switch on a laptop. A simple press will turn the system on. Another press can (with MCU intervention) turn off the system. And if things go really wrong, pressing and holding the button for ~10 seconds will force a power-down. If you're building something with an enclosed Thing Plus board and need a good power button, this is the board you need. This version has USB-C connectors but we also have a version with JST 2mm battery connectors.</p> <ul> <li> <p> </p> <p> SparkFun Soft Power Switch - USB-C    PRT-27081    Purchase from SparkFun  </p> </li> </ul> <p>In this tutorial, we'll go over the hardware and how to hookup the SparkFun Soft Power Switch - USB-C to an Arduino. We will also go over an Arduino example to get started.</p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 2m    CAB-15424 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board    WRL-19177 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Soft Power Switch - USB-C    PRT-27081 </p> </li> </ul> <ul> <li> <p> </p> <p> USB 2.0 Type-C Cable - 1 Meter    CAB-16905 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <ul> <li> <p> </p> <p> Multicolor Buttons - 4-pack    PRT-14460 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Serial Basic Breakout - CH340C and USB-C    DEV-15096 </p> </li> </ul> <ul> <li> <p> </p> <p> Breadboard - Mini Modular (Blue)    PRT-12045 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/F Pack of 10    PRT-09140 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul>"},{"location":"single_page/#usb-c-cables","title":"USB C Cables","text":"<p>For those that want to take advantage of the USB-C connectors, you can grab the following cables from the catalog.</p> <ul> <li> <p> </p> <p> USB 2.0 Type-C Cable - 1 Meter    CAB-16905 </p> </li> </ul> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 2m    CAB-15424 </p> </li> </ul>"},{"location":"single_page/#tools","title":"Tools","text":"<p>For users connecting to the plated through holes, you will need a soldering iron, solder, and general soldering accessories.</p> <ul> <li> <p> </p> <p> PINECIL Soldering Iron Kit    TOL-24063 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Strippers - 30AWG (Hakko)    TOL-12630 </p> </li> </ul> <ul> <li> <p> </p> <p> Flush Cutters - Hakko    TOL-11952 </p> </li> </ul> <ul> <li> <p> </p> <p> Heat Shrink Kit    PRT-09353 </p> </li> </ul>"},{"location":"single_page/#prototyping-accessories","title":"Prototyping Accessories","text":"<p>Depending on your setup, you may want to use IC hooks for a temporary connection. However, you will want to solder header pins to connect devices to the plated through holes for a secure connection.</p> <ul> <li> <p> </p> <p> Breadboard - Self-Adhesive (White)    PRT-12002 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <ul> <li> <p> </p> <p> Break Away Male Headers - Right Angle    PRT-00553 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/F Pack of 10    PRT-09140 </p> </li> </ul> <ul> <li> <p> </p> <p> Female Headers    PRT-00115 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> How to Solder: Through-Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> IoT RedBoard ESP32 Development Board Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Board Definitions in the Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> Logic Levels </p> </li> </ul> <ul> <li> <p> </p> <p> How to Power a Project </p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun Soft Power Switch - USB-C. For more information, check out our Resources and Going Further on the components used on the breakout board.</p> Top View Bottom View"},{"location":"single_page/#soft-power-switch-versions","title":"Soft Power Switch Versions","text":"<p>The SparkX Mk1 Soft Power Switch is great, but we do see occasional issues caused by component tolerances or the operating temperature. Mk2 is based on an application note by Texas Instruments, and is a completely digital design. It is based around a 74LVC1G175 D-type flip-flop - remember those?! - and is insensitive to temperature and component variation.</p> SparkX Soft Power Switch Mk1 SparkFun Soft Power Switch - USB-C <p>It also includes improvements like:</p> <ul> <li>An over-current self-resetting 2A fuse.</li> <li>Input and output LEDs.</li> <li>LED jumpers.</li> <li>Improved momentary button (i.e. the height of the button is increased).</li> </ul> <p>Differences include:</p> <ul> <li>The Soft Power Switch - USB-C works up to 5.5V only (the Mk1 is good up to 12V).</li> <li>For Mk2, driving the fast OFF pin HIGH by the system will force fast power off via software. However for Mk1, the fast OFF pin was driven low.</li> <li>Slightly bigger PCB: 1.0\"x1.0\" sized breakout (the Mk1 was 0.8\"x1.0\").</li> <li>This version includes USB connectors instead of JST connectors.</li> <li>USB data lines between the IN and OUT ports.</li> </ul>"},{"location":"single_page/#power","title":"Power","text":"<p>Warning</p> <p>The Soft Power Switch - USB-C works up to 5.5V only. (Mk1 is good up to 12V.)</p> <p>Warning</p> <p>The Soft Power Switch USB-C was designed to work with DC loads. Unfortunately, the board is not designed for AC loads.</p> <p>Note</p> <p>Once the Soft Power Switch - USB-C is powered, it will take a few seconds to discharge power after disconnecting the power source from the IN port. So if you decide to do quick power cycle, the board can still be powered if there is not a long enough delay.</p> <p>The maximum input voltage that the Soft Power Switch - USB-C can handle is 5.5V while the minimum input voltage is 1.8V. The board was designed to be used with USB, so the typical voltage will be about 5V. The maximum current draw that the board can handle is 2A continuous and 4A peak (fuse protected). With the VIN LED disabled, the board has a very low quiescent current: &lt;1\u00b5A @ 3.75V.</p> <ul> <li>VIN \u2014 This pin is the voltage input. As stated above, the maximum input voltage is 5.5V while the minimum is 1.8V. Voltage is applied to this pin from a USB power source, which is 5V.</li> <li>VOUT \u2014 The output voltage of the board whenever the switch is active.</li> <li>GND \u2014 Of course, is the common, ground voltage (0V reference) for the system.</li> </ul> Power, Ground and USB Connectors Highlighted <p>The Soft Power Switch - USB-C also supports USB data feed-through. If the target device is a microcontroller, you can send serial data and upload to the board.</p>"},{"location":"single_page/#power-button-and-button-state","title":"Power Button and Button State","text":"<p>The board includes a built-in momentary push button as the power button. This pin is broken out to a PTH for users to connect an external button. There is also the PUSH pin to indicate the button's state. The PUSH pin can act as an output to a microcontroller indicating the state of the power button (HIGH = not pressed, LOW = user is pressing power button). This can be used as an input to your firmware to begin to shut down before power is lost. Alternatively, there is also an OFF pin that can be driven HIGH by the system forcing fast power off via software. Below is a summary of the pins broken out.</p> <ul> <li>BTN \u2014 Short for button. If desired, connect this input pin to an external button between BTN and GND.</li> <li>PUSH \u2014 Open-drain output. This pin requires a pull-up resistor. A low indicates the button is pushed.</li> <li>OFF \u2014 Drive HIGH to turn the output off.</li> </ul> Top View Bottom View <p>Note</p> <p>For Mk2, driving the fast OFF pin HIGH by the system will force fast power off via software. However for Mk1, the fast OFF pin was driven low.</p>"},{"location":"single_page/#leds","title":"LEDs","text":"<ul> <li>VIN \u2014 The VIN LED connects to the input voltage. This indicates when there is voltage at VIN. This LED can be disabled with the LED jumper on the back of the board and below the silkscreen labeled IN.</li> <li>VOUT \u2014 The VOUT LED connects to the output voltage. This indicates when there is voltage at VOUT. This LED can be disabled with the LED jumper on the back of the board and below the silkscreen labeled OUT.</li> </ul> LEDs Highlighted"},{"location":"single_page/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>The back of the board includes jumpers to configure the board.</p> <ul> <li>LED (below IN) \u2014 By default, the LED jumper located below the silkscreen labeled IN is closed. This connects the VIN LED to the input voltage. Cutting this will disable the LED for the input voltage.</li> <li>LED (below OUT) \u2014 By default, the LED jumper located below the silkscreen labeled OUT is closed. This connects the LED to the output voltage. Cutting this jumper will disable the LED for the output voltage.</li> </ul> Jumpers Highlighted"},{"location":"single_page/#3d-model","title":"3D Model","text":"<p>A 3D model of the board and components was exported to a STEP file using KiCad.</p> <p></p> Click Here for the STEP File"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 1.0\" x 1.0\" (2.54mm x 2.54mm). There are 4x mounting holes by the corners of the board. You can use 4-40 standoffs to mount the board to a panel or enclosure.</p> Board Dimensions"},{"location":"single_page/#hardware-hookup","title":"Hardware Hookup","text":"<p>In this section, we will go over how to connect to the Soft Power Switch - USB-C.</p>"},{"location":"single_page/#connecting-via-pth","title":"Connecting via PTH","text":"<p>For temporary connections to the PTHs, you could use IC hooks to test out the pins. However, you'll need to solder headers or wires of your choice to the board for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul>"},{"location":"single_page/#input-power","title":"Input Power","text":"<p>The board was designed to be used with USB. Simply insert the USB-C connector into the USB connector labeled as IN.</p> USB-C Cable inserted into USB-C Connector <p>Of course, power can also be soldered directly to the PTH as well.</p> Power Supply              Soft Power Switch - USB-C              1.8V to 5.5V Typically 5V if using USB VIN GND GND"},{"location":"single_page/#output-power","title":"Output Power","text":"<p>Then you can insert it between the Soft Power Switch's USB connector labeled OUT and the other end will be inserted into the USB connector of the target board being powered (in this case, the SparkFun IoT RedBoard - ESP32 Development Board).</p> USB Cable between the Soft Power Switch - USB-C and IoT RedBoard - ESP32 <p>Of course, power can also be soldered directly to the PTH as well. Since we are powering the output with a USB, you will need to connect it to your system's USB power. In this case, VUSB net was labeled as V on the board. Depending on your system, it may be labeled as VUSB, RAW, or VCC. Make sure to check the board's hardware design before deciding to connect VOUT to your system.</p> Soft Power Switch - USB-C              SparkFun IoT RedBoard -ESP32 Development Board              VOUT 5V (or V) GND - <p>Note</p> <p>The voltage range of the Soft Power Switch - USB-C is between 1.8V to 5.5V. Users can also connect a different power source and connect the output to VIN of their system. Just make that the voltage is within the operating range of the target device.</p>"},{"location":"single_page/#external-button","title":"External Button","text":"<p>For users that need to connect an external button, you will simply need to connect one terminal of the button to BTN and the other terminal to GND. In this case, IC hooks and F/M jumper wires were used to connect an external momentary push button.</p> External Button Connected Soft Power Switch - USB-C              Button              BTN Normally Open Pin GND Common Pin"},{"location":"single_page/#off-and-push","title":"Off and Push","text":"<p>To connect to the OFF and PUSH pins with a microcontroller, you will need two GPIO pins with code to control or read the Soft Power Switch. Depending on your microcontroller, you may need to adjust the pin connections and definitions with respect to the microcontroller's GPIO pins.</p> OFF and PUSH Pins Connected to IoT RedBoard Soft Power Switch - USB-C              SparkFun IoT RedBoard -ESP32 Development Board              OFF <code>32</code> (or <code>A4</code>) PUSH <code>14</code> <p>Tip</p> <p>Remember, the PUSH pin requires a pull-up resistor when connecting it to a microcontroller's GPIO pin. You can use the internal pull-up resistor on the microcontroller so that the pin is not floating.</p>"},{"location":"single_page/#arduino-serial-output","title":"Arduino Serial Output","text":"<p>To view the Arduino's serial output when powering the system through USB battery, you will need to wire a 3.3V Serial Basic Breakout to the Arduino's serial UART. In this case, we connected to the SparkFun IoT RedBoard - ESP32 Development Board primary UART port. Depending on your microcontroller, you may need to adjust the pin connections and definitions with respect to the microcontroller's UART pins.</p> 3.3V Serial Basic              SparkFun IoT RedBoard- ESP32 Development Board              TXO 3/RX-0 RXI 1/TX-0 GND GND 3.3V Serial Basic Connected to ESP32 IoT RedBoard Hardware UART"},{"location":"single_page/#arduino-example","title":"Arduino Example","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing Board Definitions in the Arduino IDE</li> </ul> <p>Note</p> <p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <ul> <li>How to Install CH340 Drivers</li> </ul> <p>For the scope of this tutorial, we will highlight the example from the GitHub repository to get started. Head to the GitHub repository to download the example  </p> GitHub Repo &gt; SparkFun_Soft_Power_Switch_USB-C"},{"location":"single_page/#upload-arduino-example","title":"Upload Arduino Example","text":"<p>After unzipping the compressed files, navigate to the example: ... &gt; SparkFun_Soft_Power_Switch_USB-C-main &gt; Examples &gt; SoftPowerSwitchMk2_Example &gt; SoftPowerSwitchMk2_Example.</p> <p>If you have not already, connect the Soft Power Switch's power, OFF, and PUSH to your Arduino's GPIO pins. In this case, we used the SparkFun IoT RedBoard - ESP32 Development Board. Depending on your microcontroller, you may need to adjust the pin connections and definitions with respect to the microcontroller's GPIO pins. Then connect the USB from the IN to your computer's USB port. Press the power button to turn the Soft Power Switch ON.</p> Soft Power Switch - USB-C              SparkFun IoT RedBoard -ESP32 Development Board              VOUT 5V (or V) GND GND OFF <code>32</code> (or <code>A4</code>) PUSH <code>14</code> Uploading Code to ESP32 IoT RedBoard with Soft Power Switch Connected <p>For users using an Arduino microcontroller, select your board in the Tools menu (in our case the SparkFun ESP32 RedBoard IoT RedBoard) and the correct Port it enumerated on. You can also copy or paste the code as shown below. Then click \"Upload\".</p> <pre><code>    /*\n      Control the power to a system using the SparkFun Soft Power Switch Mk2\n      By: Nathan Seidle\n      Adapted by: Paul Clark\n      SparkFun Electronics\n      Date: March 14th, 2024\n      License: MIT. See license file for more information\n\n      This example assumes the OFF pin is connected.\n\n      A simple tap of the power button will turn on the system. If the power button is not being pressed\n      (accidental tap) the system will turn off after ~20ms. If the system turns on and sees the power\n      button held for 0.5s, it will begin normal operation.\n\n      During normal system operation, if user presses the power button for 2s, the system\n      will shut down. This means the power button can also be used as a general 'select' button as\n      long as user doesn't hold button for more than 2s.\n\n      This example will output serial states. If you are powering your board over a USB connection then\n      the power button can't do its job. We did our testing by connecting the TX and GND pins of a RedBoard to\n      an external USB to Serial adapter. That way the battery + Soft Power Switch could control power\n      to the board.  \n    */\n\n    //Hardware connections - GPIO pins (change these as required)\n    int _PUSH = 14; // Connect this GPIO to the PUSH breakout pad\n    int _OFF = 32; // Connect this GPIO to the OFF breakout pad\n\n    int STAT_LED = LED_BUILTIN;\n\n    unsigned long powerPressedStartTime = 0;\n\n    int debounceDelay = 20;\n\n    //Uncomment the following line to turn on shutdown time measurements\n    //#define PRINT_TIMER_OUTPUT\n\n    void setup()\n    {\n      Serial.begin(115200);\n      Serial.println(\"Soft Power Switch Mk2 example\");\n\n      pinMode(_PUSH, INPUT_PULLUP);\n\n      //User has pressed the power button to turn on the system\n      //Was it an accidental bump or do they really want to turn on?\n      //Let's make sure they continue to press for two seconds\n      Serial.print(\"Initial power on check\");\n      powerPressedStartTime = millis();\n      while (digitalRead(_PUSH) == LOW)\n      {\n        //Wait for user to stop pressing button.\n        //What if user has left something heavy pressing the power button?\n        //The soft power switch will automatically turn off the system! Handy.\n        delay(100);\n\n        if ((millis() - powerPressedStartTime) &gt; 500)\n          break;\n        Serial.print(\".\");\n      }\n      Serial.println();\n\n      if ((millis() - powerPressedStartTime) &lt; 500)\n      {\n        Serial.println(\"Power button tap. Returning to off state. Powering down\");\n        powerDown();\n      }\n\n      Serial.println(\"User wants to turn system on!\");\n      powerPressedStartTime = 0; //Reset var to return to normal 'on' state\n\n      //Here we display something to user indicating system is on and running\n      //For example an external display or LED turns on\n      pinMode(STAT_LED, OUTPUT);\n      digitalWrite(STAT_LED, HIGH);\n\n      Serial.println(\"Press 'r' to enter infinite loop to test power-down override\");\n      Serial.println(\"Press 'z' to do a powerdown\");\n      Serial.println(\"Press and hold power button for 2s to do a powerdown\");\n\n      while (Serial.available()) // Flush the Serial RX buffer\n        Serial.read();\n    }\n\n    void loop()\n    {\n      if (Serial.available())\n      {\n        char incoming = Serial.read();\n\n        if (incoming == 'z')\n        {\n          Serial.println(\"Power down\");\n          powerDown();\n        }\n        else if (incoming == 'r')\n        {\n          Serial.println(\"System locked. Now hold power button to force power down without using software\");\n\n          //Here we wait for user press button so we can time it\n          while (digitalRead(_PUSH) == HIGH)\n            delay(1);\n\n          powerPressedStartTime = millis();\n          Serial.println(\"Doing nothing, waiting for power override to kick in\");\n          while (1)\n          {\n    #ifdef PRINT_TIMER_OUTPUT\n            Serial.println(millis() - powerPressedStartTime);\n    #endif\n            delay(1);\n\n            if(digitalRead(_PUSH) == HIGH) break;\n          }\n          Serial.println(\"User released button before forced powered could complete. Try again, but hold power button for 7s\");\n          powerPressedStartTime = 0; //Reset var to return to normal 'on' state\n        }\n      }\n\n      if (digitalRead(_PUSH) == LOW &amp;&amp; powerPressedStartTime == 0)\n      {\n        //Debounce check\n        delay(debounceDelay);\n        if (digitalRead(_PUSH) == LOW)\n        {\n          Serial.println(\"User is pressing power button. Start timer.\");\n          powerPressedStartTime = millis();\n        }\n      }\n      else if (digitalRead(_PUSH) == LOW &amp;&amp; powerPressedStartTime &gt; 0)\n      {\n        //Debounce check\n        delay(debounceDelay);\n        if (digitalRead(_PUSH) == LOW)\n        {\n          if ((millis() - powerPressedStartTime) &gt; 2000) // Check if button has been held for &gt;= 2 seconds\n          {\n            Serial.println(\"Time to power down!\");\n            powerDown();\n          }\n        }\n      }\n      else if (digitalRead(_PUSH) == HIGH &amp;&amp; powerPressedStartTime &gt; 0)\n      {\n        //Debounce check\n        delay(debounceDelay);\n        if (digitalRead(_PUSH) == HIGH)\n        {\n          Serial.print(\"Power button released after ms: \");\n          Serial.println(millis() - powerPressedStartTime);\n        }\n        powerPressedStartTime = 0; //Reset var to return to normal 'on' state\n      }\n    }\n\n    //Immediately power down\n    void powerDown()\n    {\n      //Indicate to user we are shutting down\n      digitalWrite(STAT_LED, LOW);\n\n      Serial.println(\"Pulling OFF high\");\n      Serial.flush();\n\n      powerPressedStartTime = millis();\n\n      pinMode(_OFF, OUTPUT);\n      digitalWrite(_OFF, HIGH); // Pull OFF high to turn the power off\n\n      while (1)\n      {\n    #ifdef PRINT_TIMER_OUTPUT\n        Serial.println(millis() - powerPressedStartTime);\n    #endif\n        delay(1);\n      }\n    }\n</code></pre> <p>After uploading the code, disconnect the Arduino from your COM port. Then wire a 3.3V Serial Basic Breakout to the Arduino's serial UART. In this case, we connected to the SparkFun IoT RedBoard - ESP32 Development Board. Depending on your microcontroller, you may need to adjust the pin connections and definitions with respect to the microcontroller's UART pins.</p> 3.3V Serial Basic              SparkFun IoT RedBoard- ESP32 Development Board              TXO 3/RX-0 RXI 1/TX-0 GND GND 3.3V Serial Basic Connected to ESP32 IoT RedBoard Hardware UART"},{"location":"single_page/#initial-boot","title":"Initial Boot","text":"<p>Open the Serial Monitor or terminal emulator of your choice, and connect to the 3.3V Serial Basic Breakout's COM port with the baud rate set to 115200. Insert a USB power source into the Soft Power Switch's IN port. Hit the reset button on the Soft Power Switch. Since we are using the ESP32, we will see an initial output when the microcontroller boots up. If the button is not held down for 0.5 seconds, you will receive the following message as shown below.</p> <pre><code>Soft Power Switch Mk2 example\nInitial power on check\nPower button tap. Returning to off state. Powering down\nPulling OFF high\n</code></pre> Arduino Output Soft Power Switch - USB-C with No Button Press on Startup <p>Note</p> <p>You may receive a different output when directly connecting the Soft Power Switch to a computer's COM port rather than using a separate 3.3V Serial Basic. When using the Soft Power Switch directly, part of the ESP32 boot up and <code>Serial.print()</code> messages may be cut off as the IoT RedBoard - ESP32 is being powered up.</p>"},{"location":"single_page/#normal-operation-power-on","title":"Normal Operation - Power On","text":"<p>Press down on the button for just over 0.5 seconds (but no longer than 2 seconds) to power your Arduino for normal system operation. Once the ESP32 boots up, you should see the following output. A timer will begin checking the length of time that the button has been pressed down. Once the button has been released, you will receive an output indicating the amount of time that the button has been pressed down after 0.5 seconds.</p> <pre><code>Soft Power Switch Mk2 example\nInitial power on check....\nUser wants to turn system on!\nPress 'r' to enter infinite loop to test power-down override\nPress 'z' to do a powerdown\nPress and hold power button for 2s to do a powerdown\nUser is pressing power button. Start timer.\nPower button released after ms: 300\n</code></pre> Arduino Output Soft Power Switch - USB-C Normal Operation - Power On <p>Note</p> <p>The wake-up time can be tweaked to your own user experience. We found 500ms for power up work really well.</p>"},{"location":"single_page/#normal-operation-power-off","title":"Normal Operation - Power Off","text":"<p>Let's try turning the power off under normal operation. Press the power button for 2 seconds to power down the Arduino. You will receive the following output. You will also notice that the power LEDs on the SparkFun IoT RedBoard - ESP32 turn off indicating that there is no power.</p> <pre><code>User is pressing power button. Start timer.\nTime to power down!\nPulling OFF high\n</code></pre> Arduino Output Soft Power Switch - USB-C Normal Operation Power Down <p>Note</p> <p>The power-down time can be tweaked to your own user experience. We found 2s for power-down work really well. If you decide to adjust the power-down time, make sure to not exceed ~10 seconds as the force power down will take into effect.</p>"},{"location":"single_page/#system-lock-and-power-down-via-arduino-serial-monitor","title":"System Lock and Power Down via Arduino Serial Monitor","text":"<p>Remember the output from earlier? There were additional options to control the Soft Power Switch from the Arduino Serial Monitor. Press down on the power button for 0.5 seconds to enter the normal operation again. You will be presented with two options:</p> <ul> <li>r \u2014 Sending an r will cause the Arduino to enter an infinite loop to test power-down override. This will lock the system and force the Soft Power Switch to only shutdown when the button is pressed down rather then sending a character to the Arduino to power down. When locking the system, you will need to press the button down for 7 seconds to force the Soft Power Switch to power down. Once the button has been pressed down for 7 seconds, the Soft Power Switch will shut power off at the OUT port.</li> <li>z \u2014 Sending a z will power down the Arduino.</li> </ul> Arduino Output Soft Power Switch - USB-C Normal Operation - Power On <p>Let's send an r to lock the system to force the Soft Power Switch - USB-C to power down. Then press down on the power button for 7 seconds. You will receive the following message indicating that the system is locked. Once the power button is pressed down, an additional message on the next line will be output to indicate that we are waiting for the power override.  After 7 seconds, power will be disabled at the OUT port and the IoT RedBoard - ESP32 will turn off.</p> <pre><code>System locked. Now hold power button to force power down without using software\nDoing nothing, waiting for power override to kick in\n</code></pre> Arduino Output Soft Power Switch - USB-C Button Override <p>Note</p> <p>If the button is released before 7 seconds, you will receive the following message indicating that the forced power down could not be completed when the system is locked. This will break out of the infinite loop and require you to send another r through the serial terminal in order to test the power-down override again.</p> <pre><code>User released button before forced powered could complete. Try again, but hold power button for 7s\n</code></pre> <p> Arduino Output Soft Power Switch - USB-C Unable to Force Power Down </p>"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":""},{"location":"single_page/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a forum account to search product forums and post questions.</p> <p>Log Into SparkFun Forums</p>"},{"location":"single_page/#resources","title":"Resources","text":"<p>Now that you've successfully got your SparkFun Soft Power Switch - USB-C and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>Schematic (PDF)</li> <li>KiCad Files (ZIP)</li> <li>3D Model (STEP)</li> <li>Board Dimensions (PNG)</li> <li>Component Datasheets<ul> <li>SN74LVC1G14 (PDF)</li> <li>SN74LVC1G17 (PDF)</li> <li>SN74LVC1G175 (PDF)</li> <li>Texas Instruments Application Report: Push-Button Circuit SCEA048B (PDF)</li> </ul> </li> <li>GitHub Hardware Repo</li> </ul> <p>Or check out the other Soft Power Switch with JST connectors!</p> <ul> <li> <p> </p> <p> SparkFun Soft Power Switch - JST 2mm Hookup Guide </p> </li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a forum account to search product forums and post questions.</p> <p>Log Into SparkFun Forums</p>"},{"location":"assets/component_documentation/","title":"SparkFun Documentation","text":"<p>This directory should include any necessary datasheets, example number crunching, etc. </p>"},{"location":"github/contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Soft Power Switch - USB-C repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Soft Power Switch - USB-C repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Soft Power Switch - USB-C repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Soft Power Switch - USB-C repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"}]}